// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Booking is an object representing the database table.
type Booking struct {
	ID                     int32                            `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	Price                  float32                           `boil:"Price" json:"Price" toml:"Price" yaml:"Price"`
	Currency               string                            `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	AgentID                uint32                            `boil:"AgentID" json:"AgentID" toml:"AgentID" yaml:"AgentID"`
	Date                   time.Time                         `boil:"Date" json:"Date" toml:"Date" yaml:"Date"`
	ProviderReference      null.String                       `boil:"ProviderReference" json:"ProviderReference,omitempty" toml:"ProviderReference" yaml:"ProviderReference,omitempty"`
	Channel                null.String                       `boil:"Channel" json:"Channel,omitempty" toml:"Channel" yaml:"Channel,omitempty"`
	Status                 null.String                       `boil:"Status" json:"Status,omitempty" toml:"Status" yaml:"Status,omitempty"`
	IsManual               bool                              `boil:"IsManual" json:"IsManual" toml:"IsManual" yaml:"IsManual"`
	Client                 null.String                       `boil:"Client" json:"Client,omitempty" toml:"Client" yaml:"Client,omitempty"`
	CancellationDate       null.Time                         `boil:"CancellationDate" json:"CancellationDate,omitempty" toml:"CancellationDate" yaml:"CancellationDate,omitempty"`
	PaymentOption          BookingsNullPaymentOption         `boil:"PaymentOption" json:"PaymentOption,omitempty" toml:"PaymentOption" yaml:"PaymentOption,omitempty"`
	Taxes                  string                            `boil:"Taxes" json:"Taxes" toml:"Taxes" yaml:"Taxes"`
	Segment                null.String                       `boil:"Segment" json:"Segment,omitempty" toml:"Segment" yaml:"Segment,omitempty"`
	Source                 null.String                       `boil:"Source" json:"Source,omitempty" toml:"Source" yaml:"Source,omitempty"`
	FOCT                   bool                              `boil:"FOCT" json:"FOCT" toml:"FOCT" yaml:"FOCT"`
	MetaGroupID            null.Uint32                       `boil:"MetaGroupID" json:"MetaGroupID,omitempty" toml:"MetaGroupID" yaml:"MetaGroupID,omitempty"`
	ClientID               null.Uint32                       `boil:"ClientID" json:"ClientID,omitempty" toml:"ClientID" yaml:"ClientID,omitempty"`
	IsVirtualCC            bool                              `boil:"IsVirtualCC" json:"IsVirtualCC" toml:"IsVirtualCC" yaml:"IsVirtualCC"`
	Color                  null.String                       `boil:"Color" json:"Color,omitempty" toml:"Color" yaml:"Color,omitempty"`
	ChannelCommissionType  BookingsNullChannelCommissionType `boil:"ChannelCommissionType" json:"ChannelCommissionType,omitempty" toml:"ChannelCommissionType" yaml:"ChannelCommissionType,omitempty"`
	ChannelCommissionValue null.Float32                      `boil:"ChannelCommissionValue" json:"ChannelCommissionValue,omitempty" toml:"ChannelCommissionValue" yaml:"ChannelCommissionValue,omitempty"`
	ReleazeTime            null.Int32                        `boil:"ReleazeTime" json:"ReleazeTime,omitempty" toml:"ReleazeTime" yaml:"ReleazeTime,omitempty"`
	RequestedCheckInTime   string                            `boil:"RequestedCheckInTime" json:"RequestedCheckInTime" toml:"RequestedCheckInTime" yaml:"RequestedCheckInTime"`
	RequestedCheckOutTime  string                            `boil:"RequestedCheckOutTime" json:"RequestedCheckOutTime" toml:"RequestedCheckOutTime" yaml:"RequestedCheckOutTime"`

	R *bookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookingColumns = struct {
	ID                     string
	Price                  string
	Currency               string
	AgentID                string
	Date                   string
	ProviderReference      string
	Channel                string
	Status                 string
	IsManual               string
	Client                 string
	CancellationDate       string
	PaymentOption          string
	Taxes                  string
	Segment                string
	Source                 string
	FOCT                   string
	MetaGroupID            string
	ClientID               string
	IsVirtualCC            string
	Color                  string
	ChannelCommissionType  string
	ChannelCommissionValue string
	ReleazeTime            string
	RequestedCheckInTime   string
	RequestedCheckOutTime  string
}{
	ID:                     "ID",
	Price:                  "Price",
	Currency:               "Currency",
	AgentID:                "AgentID",
	Date:                   "Date",
	ProviderReference:      "ProviderReference",
	Channel:                "Channel",
	Status:                 "Status",
	IsManual:               "IsManual",
	Client:                 "Client",
	CancellationDate:       "CancellationDate",
	PaymentOption:          "PaymentOption",
	Taxes:                  "Taxes",
	Segment:                "Segment",
	Source:                 "Source",
	FOCT:                   "FOCT",
	MetaGroupID:            "MetaGroupID",
	ClientID:               "ClientID",
	IsVirtualCC:            "IsVirtualCC",
	Color:                  "Color",
	ChannelCommissionType:  "ChannelCommissionType",
	ChannelCommissionValue: "ChannelCommissionValue",
	ReleazeTime:            "ReleazeTime",
	RequestedCheckInTime:   "RequestedCheckInTime",
	RequestedCheckOutTime:  "RequestedCheckOutTime",
}

var BookingTableColumns = struct {
	ID                     string
	Price                  string
	Currency               string
	AgentID                string
	Date                   string
	ProviderReference      string
	Channel                string
	Status                 string
	IsManual               string
	Client                 string
	CancellationDate       string
	PaymentOption          string
	Taxes                  string
	Segment                string
	Source                 string
	FOCT                   string
	MetaGroupID            string
	ClientID               string
	IsVirtualCC            string
	Color                  string
	ChannelCommissionType  string
	ChannelCommissionValue string
	ReleazeTime            string
	RequestedCheckInTime   string
	RequestedCheckOutTime  string
}{
	ID:                     "bookings.ID",
	Price:                  "bookings.Price",
	Currency:               "bookings.Currency",
	AgentID:                "bookings.AgentID",
	Date:                   "bookings.Date",
	ProviderReference:      "bookings.ProviderReference",
	Channel:                "bookings.Channel",
	Status:                 "bookings.Status",
	IsManual:               "bookings.IsManual",
	Client:                 "bookings.Client",
	CancellationDate:       "bookings.CancellationDate",
	PaymentOption:          "bookings.PaymentOption",
	Taxes:                  "bookings.Taxes",
	Segment:                "bookings.Segment",
	Source:                 "bookings.Source",
	FOCT:                   "bookings.FOCT",
	MetaGroupID:            "bookings.MetaGroupID",
	ClientID:               "bookings.ClientID",
	IsVirtualCC:            "bookings.IsVirtualCC",
	Color:                  "bookings.Color",
	ChannelCommissionType:  "bookings.ChannelCommissionType",
	ChannelCommissionValue: "bookings.ChannelCommissionValue",
	ReleazeTime:            "bookings.ReleazeTime",
	RequestedCheckInTime:   "bookings.RequestedCheckInTime",
	RequestedCheckOutTime:  "bookings.RequestedCheckOutTime",
}

// Generated where

type whereHelperuint32 struct{ field string }

func (w whereHelperuint32) EQ(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint32) NEQ(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint32) LT(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint32) LTE(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint32) GT(x uint32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint32) GTE(x uint32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint32) IN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint32) NIN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperBookingsNullPaymentOption struct{ field string }

func (w whereHelperBookingsNullPaymentOption) EQ(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperBookingsNullPaymentOption) NEQ(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperBookingsNullPaymentOption) LT(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBookingsNullPaymentOption) LTE(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBookingsNullPaymentOption) GT(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBookingsNullPaymentOption) GTE(x BookingsNullPaymentOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBookingsNullPaymentOption) IN(slice []BookingsNullPaymentOption) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBookingsNullPaymentOption) NIN(slice []BookingsNullPaymentOption) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperBookingsNullPaymentOption) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperBookingsNullPaymentOption) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Uint32 struct{ field string }

func (w whereHelpernull_Uint32) EQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint32) NEQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint32) LT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint32) LTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint32) GT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint32) GTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Uint32) IN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Uint32) NIN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Uint32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperBookingsNullChannelCommissionType struct{ field string }

func (w whereHelperBookingsNullChannelCommissionType) EQ(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperBookingsNullChannelCommissionType) NEQ(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperBookingsNullChannelCommissionType) LT(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBookingsNullChannelCommissionType) LTE(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBookingsNullChannelCommissionType) GT(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBookingsNullChannelCommissionType) GTE(x BookingsNullChannelCommissionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBookingsNullChannelCommissionType) IN(slice []BookingsNullChannelCommissionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBookingsNullChannelCommissionType) NIN(slice []BookingsNullChannelCommissionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperBookingsNullChannelCommissionType) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperBookingsNullChannelCommissionType) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int32 struct{ field string }

func (w whereHelpernull_Int32) EQ(x null.Int32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int32) NEQ(x null.Int32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int32) LT(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int32) LTE(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int32) GT(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int32) GTE(x null.Int32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BookingWhere = struct {
	ID                     whereHelperuint32
	Price                  whereHelperfloat32
	Currency               whereHelperstring
	AgentID                whereHelperuint32
	Date                   whereHelpertime_Time
	ProviderReference      whereHelpernull_String
	Channel                whereHelpernull_String
	Status                 whereHelpernull_String
	IsManual               whereHelperbool
	Client                 whereHelpernull_String
	CancellationDate       whereHelpernull_Time
	PaymentOption          whereHelperBookingsNullPaymentOption
	Taxes                  whereHelperstring
	Segment                whereHelpernull_String
	Source                 whereHelpernull_String
	FOCT                   whereHelperbool
	MetaGroupID            whereHelpernull_Uint32
	ClientID               whereHelpernull_Uint32
	IsVirtualCC            whereHelperbool
	Color                  whereHelpernull_String
	ChannelCommissionType  whereHelperBookingsNullChannelCommissionType
	ChannelCommissionValue whereHelpernull_Float32
	ReleazeTime            whereHelpernull_Int32
	RequestedCheckInTime   whereHelperstring
	RequestedCheckOutTime  whereHelperstring
}{
	ID:                     whereHelperuint32{field: "`bookings`.`ID`"},
	Price:                  whereHelperfloat32{field: "`bookings`.`Price`"},
	Currency:               whereHelperstring{field: "`bookings`.`Currency`"},
	AgentID:                whereHelperuint32{field: "`bookings`.`AgentID`"},
	Date:                   whereHelpertime_Time{field: "`bookings`.`Date`"},
	ProviderReference:      whereHelpernull_String{field: "`bookings`.`ProviderReference`"},
	Channel:                whereHelpernull_String{field: "`bookings`.`Channel`"},
	Status:                 whereHelpernull_String{field: "`bookings`.`Status`"},
	IsManual:               whereHelperbool{field: "`bookings`.`IsManual`"},
	Client:                 whereHelpernull_String{field: "`bookings`.`Client`"},
	CancellationDate:       whereHelpernull_Time{field: "`bookings`.`CancellationDate`"},
	PaymentOption:          whereHelperBookingsNullPaymentOption{field: "`bookings`.`PaymentOption`"},
	Taxes:                  whereHelperstring{field: "`bookings`.`Taxes`"},
	Segment:                whereHelpernull_String{field: "`bookings`.`Segment`"},
	Source:                 whereHelpernull_String{field: "`bookings`.`Source`"},
	FOCT:                   whereHelperbool{field: "`bookings`.`FOCT`"},
	MetaGroupID:            whereHelpernull_Uint32{field: "`bookings`.`MetaGroupID`"},
	ClientID:               whereHelpernull_Uint32{field: "`bookings`.`ClientID`"},
	IsVirtualCC:            whereHelperbool{field: "`bookings`.`IsVirtualCC`"},
	Color:                  whereHelpernull_String{field: "`bookings`.`Color`"},
	ChannelCommissionType:  whereHelperBookingsNullChannelCommissionType{field: "`bookings`.`ChannelCommissionType`"},
	ChannelCommissionValue: whereHelpernull_Float32{field: "`bookings`.`ChannelCommissionValue`"},
	ReleazeTime:            whereHelpernull_Int32{field: "`bookings`.`ReleazeTime`"},
	RequestedCheckInTime:   whereHelperstring{field: "`bookings`.`RequestedCheckInTime`"},
	RequestedCheckOutTime:  whereHelperstring{field: "`bookings`.`RequestedCheckOutTime`"},
}

// BookingRels is where relationship names are stored.
var BookingRels = struct {
}{}

// bookingR is where relationships are stored.
type bookingR struct {
}

// NewStruct creates a new relationship struct
func (*bookingR) NewStruct() *bookingR {
	return &bookingR{}
}

// bookingL is where Load methods for each relationship are stored.
type bookingL struct{}

var (
	bookingAllColumns            = []string{"ID", "Price", "Currency", "AgentID", "Date", "ProviderReference", "Channel", "Status", "IsManual", "Client", "CancellationDate", "PaymentOption", "Taxes", "Segment", "Source", "FOCT", "MetaGroupID", "ClientID", "IsVirtualCC", "Color", "ChannelCommissionType", "ChannelCommissionValue", "ReleazeTime", "RequestedCheckInTime", "RequestedCheckOutTime"}
	bookingColumnsWithoutDefault = []string{"Price", "Currency", "AgentID", "ProviderReference", "Channel", "Status", "Client", "CancellationDate", "PaymentOption", "Taxes", "Segment", "Source", "MetaGroupID", "ClientID", "IsVirtualCC", "Color", "ChannelCommissionType", "ChannelCommissionValue", "ReleazeTime", "RequestedCheckInTime", "RequestedCheckOutTime"}
	bookingColumnsWithDefault    = []string{"ID", "Date", "IsManual", "FOCT"}
	bookingPrimaryKeyColumns     = []string{"ID"}
	bookingGeneratedColumns      = []string{}
)

type (
	// BookingSlice is an alias for a slice of pointers to Booking.
	// This should almost always be used instead of []Booking.
	BookingSlice []*Booking
	// BookingHook is the signature for custom Booking hook methods
	BookingHook func(context.Context, boil.ContextExecutor, *Booking) error

	bookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookingType                 = reflect.TypeOf(&Booking{})
	bookingMapping              = queries.MakeStructMapping(bookingType)
	bookingPrimaryKeyMapping, _ = queries.BindMapping(bookingType, bookingMapping, bookingPrimaryKeyColumns)
	bookingInsertCacheMut       sync.RWMutex
	bookingInsertCache          = make(map[string]insertCache)
	bookingUpdateCacheMut       sync.RWMutex
	bookingUpdateCache          = make(map[string]updateCache)
	bookingUpsertCacheMut       sync.RWMutex
	bookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookingAfterSelectHooks []BookingHook

var bookingBeforeInsertHooks []BookingHook
var bookingAfterInsertHooks []BookingHook

var bookingBeforeUpdateHooks []BookingHook
var bookingAfterUpdateHooks []BookingHook

var bookingBeforeDeleteHooks []BookingHook
var bookingAfterDeleteHooks []BookingHook

var bookingBeforeUpsertHooks []BookingHook
var bookingAfterUpsertHooks []BookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Booking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Booking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Booking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Booking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Booking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Booking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Booking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Booking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Booking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookingHook registers your hook function for all future operations.
func AddBookingHook(hookPoint boil.HookPoint, bookingHook BookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookingAfterSelectHooks = append(bookingAfterSelectHooks, bookingHook)
	case boil.BeforeInsertHook:
		bookingBeforeInsertHooks = append(bookingBeforeInsertHooks, bookingHook)
	case boil.AfterInsertHook:
		bookingAfterInsertHooks = append(bookingAfterInsertHooks, bookingHook)
	case boil.BeforeUpdateHook:
		bookingBeforeUpdateHooks = append(bookingBeforeUpdateHooks, bookingHook)
	case boil.AfterUpdateHook:
		bookingAfterUpdateHooks = append(bookingAfterUpdateHooks, bookingHook)
	case boil.BeforeDeleteHook:
		bookingBeforeDeleteHooks = append(bookingBeforeDeleteHooks, bookingHook)
	case boil.AfterDeleteHook:
		bookingAfterDeleteHooks = append(bookingAfterDeleteHooks, bookingHook)
	case boil.BeforeUpsertHook:
		bookingBeforeUpsertHooks = append(bookingBeforeUpsertHooks, bookingHook)
	case boil.AfterUpsertHook:
		bookingAfterUpsertHooks = append(bookingAfterUpsertHooks, bookingHook)
	}
}

// One returns a single booking record from the query.
func (q bookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Booking, error) {
	o := &Booking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for bookings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Booking records from the query.
func (q bookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookingSlice, error) {
	var o []*Booking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Booking slice")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Booking records in the query.
func (q bookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count bookings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if bookings exists")
	}

	return count > 0, nil
}

// Bookings retrieves all the records using an executor.
func Bookings(mods ...qm.QueryMod) bookingQuery {
	mods = append(mods, qm.From("`bookings`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`bookings`.*"})
	}

	return bookingQuery{q}
}

// FindBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec boil.ContextExecutor, iD int32, selectCols ...string) (*Booking, error) {
	bookingObj := &Booking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bookings` where `ID`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from bookings")
	}

	if err = bookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookingObj, err
	}

	return bookingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Booking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no bookings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookingInsertCacheMut.RLock()
	cache, cached := bookingInsertCache[key]
	bookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bookings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bookings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bookings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bookingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into bookings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bookingMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for bookings")
	}

CacheNoHooks:
	if !cached {
		bookingInsertCacheMut.Lock()
		bookingInsertCache[key] = cache
		bookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Booking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Booking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookingUpdateCacheMut.RLock()
	cache, cached := bookingUpdateCache[key]
	bookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update bookings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bookings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, append(wl, bookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update bookings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for bookings")
	}

	if !cached {
		bookingUpdateCacheMut.Lock()
		bookingUpdateCache[key] = cache
		bookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for bookings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bookings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all booking")
	}
	return rowsAff, nil
}

var mySQLBookingUniqueColumns = []string{
	"ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Booking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no bookings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBookingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookingUpsertCacheMut.RLock()
	cache, cached := bookingUpsertCache[key]
	bookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookingAllColumns,
			bookingColumnsWithDefault,
			bookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookingAllColumns,
			bookingPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert bookings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bookings`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bookings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bookingType, bookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookingType, bookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for bookings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int32(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bookingMapping["ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bookingType, bookingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for bookings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for bookings")
	}

CacheNoHooks:
	if !cached {
		bookingUpsertCacheMut.Lock()
		bookingUpsertCache[key] = cache
		bookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Booking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Booking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Booking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookingPrimaryKeyMapping)
	sql := "DELETE FROM `bookings` WHERE `ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for bookings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no bookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for bookings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bookings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from booking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for bookings")
	}

	if len(bookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Booking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bookings`.* FROM `bookings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in BookingSlice")
	}

	*o = slice

	return nil
}

// BookingExists checks if the Booking row exists.
func BookingExists(ctx context.Context, exec boil.ContextExecutor, iD int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bookings` where `ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if bookings exists")
	}

	return exists, nil
}

// Exists checks if the Booking row exists.
func (o *Booking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookingExists(ctx, exec, o.ID)
}

// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("entity: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type BookingsPaymentOption string

// Enum values for BookingsPaymentOption
const (
	BookingsPaymentOptionAcssDebit         BookingsPaymentOption = "acss_debit"
	BookingsPaymentOptionAfterpayClearpay  BookingsPaymentOption = "afterpay_clearpay"
	BookingsPaymentOptionAirbnb            BookingsPaymentOption = "airbnb"
	BookingsPaymentOptionAlipay            BookingsPaymentOption = "alipay"
	BookingsPaymentOptionAuBecsDebit       BookingsPaymentOption = "au_becs_debit"
	BookingsPaymentOptionBacsDebit         BookingsPaymentOption = "bacs_debit"
	BookingsPaymentOptionBancontact        BookingsPaymentOption = "bancontact"
	BookingsPaymentOptionBankTransfer      BookingsPaymentOption = "bank_transfer"
	BookingsPaymentOptionBoleto            BookingsPaymentOption = "boleto"
	BookingsPaymentOptionCash              BookingsPaymentOption = "cash"
	BookingsPaymentOptionCreditCard        BookingsPaymentOption = "credit_card"
	BookingsPaymentOptionEps               BookingsPaymentOption = "eps"
	BookingsPaymentOptionFPX               BookingsPaymentOption = "fpx"
	BookingsPaymentOptionGiftCard          BookingsPaymentOption = "gift_card"
	BookingsPaymentOptionGiropay           BookingsPaymentOption = "giropay"
	BookingsPaymentOptionGrabpay           BookingsPaymentOption = "grabpay"
	BookingsPaymentOptionIdeal             BookingsPaymentOption = "ideal"
	BookingsPaymentOptionOnAccount         BookingsPaymentOption = "on_account"
	BookingsPaymentOptionOxxo              BookingsPaymentOption = "oxxo"
	BookingsPaymentOptionP24               BookingsPaymentOption = "p24"
	BookingsPaymentOptionSepaDebit         BookingsPaymentOption = "sepa_debit"
	BookingsPaymentOptionSofort            BookingsPaymentOption = "sofort"
	BookingsPaymentOptionSwish             BookingsPaymentOption = "swish"
	BookingsPaymentOptionVirtualMasterCard BookingsPaymentOption = "virtual_master_card"
	BookingsPaymentOptionVirtualVisaCard   BookingsPaymentOption = "virtual_visa_card"
	BookingsPaymentOptionVoucher           BookingsPaymentOption = "voucher"
	BookingsPaymentOptionWechatPay         BookingsPaymentOption = "wechat_pay"
)

func AllBookingsPaymentOption() []BookingsPaymentOption {
	return []BookingsPaymentOption{
		BookingsPaymentOptionAcssDebit,
		BookingsPaymentOptionAfterpayClearpay,
		BookingsPaymentOptionAirbnb,
		BookingsPaymentOptionAlipay,
		BookingsPaymentOptionAuBecsDebit,
		BookingsPaymentOptionBacsDebit,
		BookingsPaymentOptionBancontact,
		BookingsPaymentOptionBankTransfer,
		BookingsPaymentOptionBoleto,
		BookingsPaymentOptionCash,
		BookingsPaymentOptionCreditCard,
		BookingsPaymentOptionEps,
		BookingsPaymentOptionFPX,
		BookingsPaymentOptionGiftCard,
		BookingsPaymentOptionGiropay,
		BookingsPaymentOptionGrabpay,
		BookingsPaymentOptionIdeal,
		BookingsPaymentOptionOnAccount,
		BookingsPaymentOptionOxxo,
		BookingsPaymentOptionP24,
		BookingsPaymentOptionSepaDebit,
		BookingsPaymentOptionSofort,
		BookingsPaymentOptionSwish,
		BookingsPaymentOptionVirtualMasterCard,
		BookingsPaymentOptionVirtualVisaCard,
		BookingsPaymentOptionVoucher,
		BookingsPaymentOptionWechatPay,
	}
}

func (e BookingsPaymentOption) IsValid() error {
	switch e {
	case BookingsPaymentOptionAcssDebit, BookingsPaymentOptionAfterpayClearpay, BookingsPaymentOptionAirbnb, BookingsPaymentOptionAlipay, BookingsPaymentOptionAuBecsDebit, BookingsPaymentOptionBacsDebit, BookingsPaymentOptionBancontact, BookingsPaymentOptionBankTransfer, BookingsPaymentOptionBoleto, BookingsPaymentOptionCash, BookingsPaymentOptionCreditCard, BookingsPaymentOptionEps, BookingsPaymentOptionFPX, BookingsPaymentOptionGiftCard, BookingsPaymentOptionGiropay, BookingsPaymentOptionGrabpay, BookingsPaymentOptionIdeal, BookingsPaymentOptionOnAccount, BookingsPaymentOptionOxxo, BookingsPaymentOptionP24, BookingsPaymentOptionSepaDebit, BookingsPaymentOptionSofort, BookingsPaymentOptionSwish, BookingsPaymentOptionVirtualMasterCard, BookingsPaymentOptionVirtualVisaCard, BookingsPaymentOptionVoucher, BookingsPaymentOptionWechatPay:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e BookingsPaymentOption) String() string {
	return string(e)
}

// BookingsNullPaymentOption is a nullable BookingsPaymentOption enum type. It supports SQL and JSON serialization.
type BookingsNullPaymentOption struct {
	Val   BookingsPaymentOption
	Valid bool
}

// BookingsNullPaymentOptionFrom creates a new BookingsPaymentOption that will never be blank.
func BookingsNullPaymentOptionFrom(v BookingsPaymentOption) BookingsNullPaymentOption {
	return NewBookingsNullPaymentOption(v, true)
}

// BookingsNullPaymentOptionFromPtr creates a new BookingsNullPaymentOption that be null if s is nil.
func BookingsNullPaymentOptionFromPtr(v *BookingsPaymentOption) BookingsNullPaymentOption {
	if v == nil {
		return NewBookingsNullPaymentOption("", false)
	}
	return NewBookingsNullPaymentOption(*v, true)
}

// NewBookingsNullPaymentOption creates a new BookingsNullPaymentOption
func NewBookingsNullPaymentOption(v BookingsPaymentOption, valid bool) BookingsNullPaymentOption {
	return BookingsNullPaymentOption{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *BookingsNullPaymentOption) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e BookingsNullPaymentOption) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e BookingsNullPaymentOption) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *BookingsNullPaymentOption) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = BookingsPaymentOption(text)
	e.Valid = true
	return nil
}

// SetValid changes this BookingsNullPaymentOption value and also sets it to be non-null.
func (e *BookingsNullPaymentOption) SetValid(v BookingsPaymentOption) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this BookingsNullPaymentOption value, or a nil pointer if this BookingsNullPaymentOption is null.
func (e BookingsNullPaymentOption) Ptr() *BookingsPaymentOption {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e BookingsNullPaymentOption) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *BookingsNullPaymentOption) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e BookingsNullPaymentOption) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type BookingsChannelCommissionType string

// Enum values for BookingsChannelCommissionType
const (
	BookingsChannelCommissionTypeAmount   BookingsChannelCommissionType = "amount"
	BookingsChannelCommissionTypePercents BookingsChannelCommissionType = "percents"
)

func AllBookingsChannelCommissionType() []BookingsChannelCommissionType {
	return []BookingsChannelCommissionType{
		BookingsChannelCommissionTypeAmount,
		BookingsChannelCommissionTypePercents,
	}
}

func (e BookingsChannelCommissionType) IsValid() error {
	switch e {
	case BookingsChannelCommissionTypeAmount, BookingsChannelCommissionTypePercents:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e BookingsChannelCommissionType) String() string {
	return string(e)
}

// BookingsNullChannelCommissionType is a nullable BookingsChannelCommissionType enum type. It supports SQL and JSON serialization.
type BookingsNullChannelCommissionType struct {
	Val   BookingsChannelCommissionType
	Valid bool
}

// BookingsNullChannelCommissionTypeFrom creates a new BookingsChannelCommissionType that will never be blank.
func BookingsNullChannelCommissionTypeFrom(v BookingsChannelCommissionType) BookingsNullChannelCommissionType {
	return NewBookingsNullChannelCommissionType(v, true)
}

// BookingsNullChannelCommissionTypeFromPtr creates a new BookingsNullChannelCommissionType that be null if s is nil.
func BookingsNullChannelCommissionTypeFromPtr(v *BookingsChannelCommissionType) BookingsNullChannelCommissionType {
	if v == nil {
		return NewBookingsNullChannelCommissionType("", false)
	}
	return NewBookingsNullChannelCommissionType(*v, true)
}

// NewBookingsNullChannelCommissionType creates a new BookingsNullChannelCommissionType
func NewBookingsNullChannelCommissionType(v BookingsChannelCommissionType, valid bool) BookingsNullChannelCommissionType {
	return BookingsNullChannelCommissionType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *BookingsNullChannelCommissionType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e BookingsNullChannelCommissionType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e BookingsNullChannelCommissionType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *BookingsNullChannelCommissionType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = BookingsChannelCommissionType(text)
	e.Valid = true
	return nil
}

// SetValid changes this BookingsNullChannelCommissionType value and also sets it to be non-null.
func (e *BookingsNullChannelCommissionType) SetValid(v BookingsChannelCommissionType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this BookingsNullChannelCommissionType value, or a nil pointer if this BookingsNullChannelCommissionType is null.
func (e BookingsNullChannelCommissionType) Ptr() *BookingsChannelCommissionType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e BookingsNullChannelCommissionType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *BookingsNullChannelCommissionType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e BookingsNullChannelCommissionType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}
